# -*- python -*-
# ex: set filetype=python:

import os
import re
from buildbot.buildslave import BuildSlave
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig


CONFIG_DIR = os.path.dirname(os.path.realpath(__file__))

c = BuildmasterConfig = {}

c['slaves'] = [BuildSlave("llvm-ctu-ci-worker", "llvm-ctu-ci-worker-pass")]

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(GitPoller(
    'git://github.com/llvm/llvm-project.git',
    pollInterval=60,
    workdir='gitpoller_llvm_project'))

# Merge changes arriving simultaneously.
c['mergeRequests'] = True

####### SCHEDULERS

def affectsLLVMOrClang(change):
  pattern = re.compile(r'^(llvm|clang)/.*')
  return any(map(pattern.match, change.files))

c['schedulers'] = []

# Poll the changes inside/
c['schedulers'].append(SingleBranchScheduler(
                            name="llvm-or-clang-changed",
                            branch='master',
                            fileIsImportant=affectsLLVMOrClang,
                            builderNames=["llvm-ctu-ci"]))

# Analyze tmux with upstream clang, using CodeChecker, and explicitly
# disabling macro expansion.

useClangAndCodeChecker = 'export PATH="$(realpath build/bin):$(realpath codechecker/build/CodeChecker/bin):$PATH" && source codechecker/venv/bin/activate '

f = BuildFactory()

f.addStep(Git(name='Checkout LLVM-Project',
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              shallow=True,
              description='Checkout LLVM',
              workdir='llvm_source'))

f.addStep(ShellCommand(name='Assemble LLVM build tree',
              command=('rm -rf llvm && cp -r llvm_source/llvm llvm &&'
                      ' cp -r llvm_source/clang ./llvm/tools/clang'),
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Generate the LLVM build directory',
              workdir='.'))

# Generate analyzer Clang.
# Use ccache to speed up build during development.
# FIXME: Using ccache is probably not the best idea in a live environment.
f.addStep(ShellCommand(name='CMake generate analyzer Clang',
              command=["cmake", "-G", "Ninja", "../llvm",
                       "-DCMAKE_BUILD_TYPE=Release",
                       "-DLLVM_ENABLE_ASSERTIONS=True",
                       "-DLLVM_TARGETS_TO_BUILD=X86",
                       "-DBUILD_SHARED_LIBS=ON",
                       "-DCMAKE_C_COMPILER_LAUNCHER=ccache",
                       "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache"],
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Generate the Clang build directory',
              workdir='build'))

# Clean the build directory.
f.addStep(ShellCommand(name='Clean the Clang build directory',
              command=['ninja', 'clean'],
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Clean the Clang build directory',
              workdir='build'))

# Build LLVM.
f.addStep(ShellCommand(name='Build LLVM',
              command=['ninja', 'all'],
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Build LLVM',
              workdir='build'))

# Use a fixed version of CodeChecker.
# TODO: Allow CodeChecker version to be specified as a build-parameter.
CC_URL='https://github.com/Ericsson/codechecker.git'
CC_TAG='v6.9.1'

f.addStep(ShellCommand(name='Delete CodeChecker directory',
              command=(['rm', '-rf', 'codechecker']),
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Delete CodeChecker',
              workdir='.'))

# Download CodeChecker source.
f.addStep(ShellCommand(name='Download CodeChecker tag {}'.format(CC_TAG),
              command='git init && git remote add origin "{url}" && git fetch --depth 1 origin {tag} && git checkout FETCH_HEAD'.format(url=CC_URL, tag=CC_TAG),
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Download CodeChecker',
              workdir='codechecker'))

# Build CodeChecker virtualenv.
f.addStep(ShellCommand(name='Build CodeChecker venv',
              command=['make','venv'],
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Make the virtual environment for CodeChecker',
              workdir='codechecker'))

# Build CodeChecker package.
f.addStep(ShellCommand(name='Build CodeChecker package',
              command='bash -c -- \'' + useClangAndCodeChecker + ' && cd codechecker && make package\'',
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Build the CodeChecker package used for analysis',
              workdir='.'))

TMUX_URL='https://github.com/tmux/tmux.git'
TMUX_TAG='2.6'

# Clean tmux.
f.addStep(ShellCommand(name='Delete tmux',
              command=['rm','-rf', 'tmux'],
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Delete the tmux directory',
              workdir='.'))

# Download tmux source.
f.addStep(ShellCommand(name='Download tmux tag {}'.format(TMUX_TAG),
              command='git init && git remote add origin "{url}" && git fetch --depth 1 origin {tag} && git checkout FETCH_HEAD'.format(url=TMUX_URL, tag=TMUX_TAG),
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Download tmux',
              workdir='tmux'))

# Configure tmux.
f.addStep(ShellCommand(name='Configure tmux',
              command='./autogen.sh && ./configure',
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Configure tmux project',
              workdir='tmux'))

# Log tmux with CodeChecker.
f.addStep(ShellCommand(name='Log tmux with CodeChecker',
              command='bash -c -- \'{} && cd tmux && CodeChecker log --output compile_commands.json -b make\''.format(useClangAndCodeChecker),
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Log tmux build with CodeChecker',
              workdir='.'))

# Make .sa_args file to disable macro expansion. 
f.addStep(ShellCommand(name='Create file to disable macro expansion',
              command="echo '-Xclang -analyzer-config -Xclang expand-macros=false ' > .sa_args",
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Create .sa_args file to disable macro expansion',
              workdir='tmux'))

# Clean tmux results.
f.addStep(ShellCommand(name='Delete tmux results',
              command=['rm','-rf', 'tmux_results'],
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Delete the tmux results directory',
              workdir='.'))

# Analyze tmux using CodeChecker.
f.addStep(ShellCommand(name='Analyze tmux',
              command='bash -c -- \'{} && CodeChecker analyze --output tmux_results --saargs tmux/.sa_args --jobs 1 --verbose debug tmux/compile_commands.json\''.format(useClangAndCodeChecker),
              warnOnFailure=True,
              haltOnFailure=True,
              flunkOnFailure=False,
              description='Analyze tmux in CTU mode',
              workdir='.'))

c['builders'] = []
c['builders'].append(
    BuilderConfig(name='llvm-ctu-ci',
      slavenames=['llvm-ctu-ci-worker'],
      factory=f))

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))


c['title'] = "LLVM CTU CI"
c['titleURL'] = "http://13.90.81.45:8010"

c['buildbotURL'] = "http://13.90.81.45:8010/"

c['db_url'] = "sqlite:///state.sqlite"
